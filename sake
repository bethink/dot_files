#!/usr/bin/env ruby
require "rubygems"
require "rake"
require "colored"
require "fileutils"

class Object
  def blank?
    respond_to?(:empty?) ? empty? : !self
  end

  # An object is present if it's not blank.
  def present?
    !blank?
  end
  
  def presence
    self if present?
  end
end

class NilClass #:nodoc:
  def blank?
    true
  end
end

class FalseClass #:nodoc:
  def blank?
    true
  end
end

class TrueClass #:nodoc:
  def blank?
    false
  end
end

class Array #:nodoc:
  alias_method :blank?, :empty?
end

class Hash #:nodoc:
  alias_method :blank?, :empty?
end

class String #:nodoc:
  def blank?
    self !~ /\S/
  end
end

class Numeric #:nodoc:
  def blank?
    false
  end
end

include FileUtils

Rake.application.init("sake")

desc "Push current branch"
task :gp do
  branch_name = @git_help.current_branch
  puts "Pushing branch #{branch_name}"
  system("git push origin #{branch_name}")
end

desc "Merge remote of current with current branch"
task :gm do
  branch_name = @git_help.current_branch
  puts "Merging origin/#{branch_name} with #{branch_name}"
  system("git merge origin/#{branch_name}")
end

desc "Show diff"
task :gd do
  system("git diff")
end

desc "Do hard reset"
task :grst do
  system("git reset --hard HEAD")
end

desc "Clone code from one of the CRRC repos"
task :gcs do
  project_name = ENV['project']
  system("git clone git@code.crrc.ca:#{project_name}.git")
end

desc "Creating a tracking local branch"
task :gct do
  branch_name = ENV['branch']
  if(branch_name.blank?)
    abort("Argument branch=".red+"<branch_name>".green)
  else
    system("git checkout --track -b #{branch_name} origin/#{branch_name}")
  end
end

desc "Update all Solaro related repos"
task :slu do
  solaro_dir = File.join(ENV['HOME'],'checkout','solaro')
  cd(solaro_dir) { system("git fetch") }
  securo_admin_dir = File.join(ENV['HOME'],'checkout','securo_admin')
  cd(securo_admin_dir) { system("git fetch") }
  payment_dir = File.join(ENV['HOME'],'checkout','securo_payment_middleware')
  cd(payment_dir) { system("git fetch") }
  solaro_revision_dir = File.join(ENV['HOME'],'solaro_revision')
  cd(solaro_revision_dir) { system("git fetch") }
end

desc "Globally available task list"
task :default do
  Rake.application.tasks.each do |task|
    puts sprintf("%-25s : %s",task.name.bold.red,task.comment.blue)
  end
end

desc "Update solaro"
task :sl do
  solaro_dir = File.join(ENV['HOME'],'checkout','solaro')
  cd(solaro_dir) do 
    system("git fetch")
    Rake.application.invoke_task("gm")
  end
end

module Sake
  class Git
    def current_branch
      cmd_output = `git symbolic-ref HEAD`
      branch_name = cmd_output.strip.split("/")[-1]
      branch_name
    end
  end
end
@git_help = Sake::Git.new()

Rake.application.top_level()




